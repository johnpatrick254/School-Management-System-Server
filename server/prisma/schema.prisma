// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  STUDENT
  TEACHER
  ACCOUNTANT
  ADMIN
  SUPER_ADMIN
}

enum PermissionType {
  CREATE_STAFF
  DELETE_STUDENT
  VIEW_STUDENT
  DELETE_ADMIN
  VIEW_ADMIN
  DELETE_TEACHER
  VIEW_TEACHER
  DELETE_ACCOUNTANT
  VIEW_ACCOUNTANT
  SUPER_ADMIN
  VIEW_COHORT
  DELETE_COHORT
  CREATE_CAREER
  VIEW_CAREER
  DELETE_CAREER
  UPDATE_CAREER
  DELETE_SECTION
  VIEW_SECTION
  CREATE_SECTION
  CREATE_COURSE
  UPDATE_COURSE
  VIEW_COURSE
  DELETE_COURSE
  CREATE_SEMESTER
  UPDATE_SEMESTER
  VIEW_SEMESTER
}

model Permission {
  id          String         @id @default(cuid())
  type        PermissionType @unique
  students    Student[]
  teachers    Teacher[]
  accountants Accountant[]
  admins      Admin[]
}

model Student {
  id                String             @id @default(cuid())
  code              String             @unique
  name              String
  surname           String
  email             String             @unique
  password          String
  isActive          Boolean            @default(true)
  EOC               DateTime
  cohortId          String
  type              UserType
  cohort            Cohort             @relation(fields: [cohortId], references: [id], onUpdate: Cascade)
  sectionId         String
  section           Section            @relation(fields: [sectionId], references: [id], onUpdate: Cascade)
  courses           Course[]
  transaction       Transactions[]
  userAnswer        UserAnswer[]
  examResult        ExamResult[]
  courseResult      CourseResult[]
  assignmentResults AssignmentResult[]
  fee               Fee[]
  permissions       Permission[]
}

model Teacher {
  id          String       @id @default(cuid())
  code        String       @unique
  name        String
  surname     String
  email       String       @unique
  year        Int          @default(dbgenerated("EXTRACT(YEAR FROM NOW())"))
  password    String
  type        UserType
  isActive    Boolean      @default(true)
  Courses     Course[]
  sections    Section[]
  exams       Exam[]
  assignments Assignment[]
  permissions Permission[]
}

model Accountant {
  id           String         @id @default(cuid())
  code         String         @unique
  name         String
  surname      String
  email        String         @unique
  year         Int            @default(dbgenerated("EXTRACT(YEAR FROM NOW())"))
  password     String
  type         UserType
  isActive     Boolean        @default(true)
  transactions Transactions[]
  permissions  Permission[]
}

model Admin {
  id          String       @id @default(cuid())
  code        String       @unique
  name        String
  surname     String
  email       String       @unique
  year        Int          @default(dbgenerated("EXTRACT(YEAR FROM NOW())"))
  password    String
  type        UserType
  isActive    Boolean      @default(true)
  permissions Permission[]
}

model Course {
  code          String         @unique
  id            String         @id @default(cuid())
  contentUrl    String?
  name          String
  teachers      Teacher[]
  semesters     Semester[]
  sections      Section[]
  assignments   Assignment[]
  exams         Exam[]
  cohorts       Cohort[]
  courseResults CourseResult[]
  students      Student[]
  schedules     Schedule[]
  careers      Career[]
}

model Cohort {
  code     String    @unique
  id       String    @id @default(cuid())
  year     Int       @default(dbgenerated("EXTRACT(YEAR FROM NOW())"))
  careerId String
  career   Career    @relation(fields: [careerId], references: [id], onUpdate: Cascade)
  sections Section[]
  students Student[]
  course   Course[]
}

model Career {
  id        String     @id @default(cuid())
  code      String     @unique
  name      String
  cost      Int
  year      Int          @default(dbgenerated("EXTRACT(YEAR FROM NOW())"))
  semesters Semester[]
  cohorts   Cohort[]
  fee       Fee[]
  courses Course[]
}

model Semester {
  id           String   @id @default(cuid())
  academicYear String
  careerId     String
  name         String
  career       Career   @relation(fields: [careerId], references: [id])
  courses      Course[]
}

model Section {
  id        String     @id @default(cuid())
  name      String
  cohortId  String
  cohort    Cohort     @relation(fields: [cohortId], references: [id], onUpdate: Cascade)
  teacherId String
  teacher   Teacher    @relation(fields: [teacherId], references: [id], onUpdate: Cascade)
  schedules Schedule[]
  courses   Course[]
  students  Student[]
}

enum PaymentPurpose {
  FEES
  EXTRA_CURRICULAR
  DAMAGES
}

model Transactions {
  id           String         @id @default(cuid())
  amount       String
  purpose      PaymentPurpose
  status       String
  notes        String?
  createdAt    DateTime       @default(now())
  student_code String
  student      Student        @relation(fields: [student_code], references: [code], onUpdate: Cascade)
  accountantId String
  accountant   Accountant     @relation(fields: [accountantId], references: [id], onUpdate: Cascade)
  fee          Fee[]
}

model Assignment {
  code              String             @unique
  id                String             @id @default(cuid())
  name              String
  autoMark          Boolean
  teacherId         String
  teacher           Teacher            @relation(fields: [teacherId], references: [id], onUpdate: Cascade)
  courseId          String
  course            Course             @relation(fields: [courseId], references: [id], onUpdate: Cascade)
  questions         Question[]
  assignmentResults AssignmentResult[]
}

model Exam {
  code       String       @unique
  id         String       @id @default(cuid())
  totalMarks Int
  autoMark   Boolean
  teacherId  String
  teacher    Teacher      @relation(fields: [teacherId], references: [id], onUpdate: Cascade)
  courseId   String
  course     Course       @relation(fields: [courseId], references: [id], onUpdate: Cascade)
  examResult ExamResult[]
  questions  Question[]
}

model Schedule {
  id        String    @id @default(cuid())
  startTime DateTime
  endTime   DateTime
  courseId  String
  course    Course    @relation(fields: [courseId], references: [id], onUpdate: Cascade)
  section   Section[]
}

enum QuestionType {
  MULTICHOICE
  TEXTAREA
}

model Question {
  id             String           @id @default(cuid())
  required       Boolean
  type           QuestionType
  content        String @db.Text
  examId         String?
  exam           Exam?            @relation(fields: [examId], references: [id], onUpdate: Cascade)
  assignmentId   String?
  assignment     Assignment?      @relation(fields: [assignmentId], references: [id], onUpdate: Cascade)
  questionOption QuestionOption[]
  userAnswer     UserAnswer[]
}

model QuestionOption {
  id         String   @id @default(cuid())
  answer     String
  isCorrect  Boolean
  questionId String
  question   Question @relation(fields: [questionId], references: [id], onUpdate: Cascade)
}

model UserAnswer {
  id                String             @id @default(cuid())
  answer            String @db.Text
  questionId        String
  question          Question           @relation(fields: [questionId], references: [id], onUpdate: Cascade)
  studentId         String
  student           Student            @relation(fields: [studentId], references: [id], onUpdate: Cascade)
  examResults       ExamResult[]
  assignmentResults AssignmentResult[]
}

model ExamResult {
  id             String       @id @default(cuid())
  score          String
  examId         String
  exam           Exam         @relation(fields: [examId], references: [id], onUpdate: Cascade)
  studentId      String
  student        Student      @relation(fields: [studentId], references: [id], onUpdate: Cascade)
  userAnswer     UserAnswer[]
  courseResultId String
  courseResult   CourseResult @relation(fields: [courseResultId], references: [id], onUpdate: Cascade)
}

model AssignmentResult {
  id           String       @id @default(cuid())
  score        String
  assignmentId String
  assignment   Assignment   @relation(fields: [assignmentId], references: [id], onUpdate: Cascade)
  studentId    String
  student      Student      @relation(fields: [studentId], references: [id], onUpdate: Cascade)
  userAnswer   UserAnswer[]
}

model CourseResult {
  id          String       @id @default(cuid())
  score       String
  studentId   String
  student     Student      @relation(fields: [studentId], references: [id], onUpdate: Cascade)
  courseId    String
  course      Course       @relation(fields: [courseId], references: [id], onUpdate: Cascade)
  examResults ExamResult[]
}

model Fee {
  id          String         @id @default(cuid())
  amount      Int
  balance     Int
  paid        Int
  careerId    String
  Career      Career         @relation(fields: [careerId], references: [id], onUpdate: Cascade)
  studentId   String
  student     Student        @relation(fields: [studentId], references: [id], onUpdate: Cascade)
  transaction Transactions[]
}
